----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date:    16:46:23 04/24/2012 
-- Design Name: 
-- Module Name:    red_1049089 - Behavioral 
-- Project Name: 
-- Target Devices: 
-- Tool versions: 
-- Description: 
--
-- Dependencies: 
--
-- Revision: 
-- Revision 0.01 - File Created
-- Additional Comments: 
--
----------------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.all;
use ieee.numeric_std.all;
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity red_1049089 is
  port (
    clk   : in  std_logic;
    val   : in  unsigned(2*21-1 downto 0) := (others => '0');
    red   : out unsigned(21-1 downto 0)   := (others => '0');
    delay : out integer                   := 6
    );
end red_1049089;

architecture Behavioral of red_1049089 is
  constant PRIME_P : unsigned := to_unsigned(1049089, 21);

  signal temp  : unsigned(42-1 downto 0):=(others => '0');
  signal temp2 : unsigned(42-1 downto 0):=(others => '0');
  signal temp3 : unsigned(42-1 downto 0):=(others => '0');
  signal in_reg  : unsigned(42-1 downto 0):=(others => '0');
  signal red_reg  : unsigned(21-1 downto 0):=(others => '0');

begin
  process (clk)
  begin
    if rising_edge(clk) then

      in_reg <= val;
      temp  <= in_reg(20 downto 0) + (PRIME_P*2051-((resize(in_reg(41 downto 21),34) sll 10)+ (2*in_reg(41 downto 21))));
      temp2 <= temp(20 downto 0) + (8*PRIME_P-((temp(41 downto 21) sll 10)+ (2*temp(41 downto 21))));
      temp3 <= temp2(20 downto 0) + (2*PRIME_P-((temp2(41 downto 21) sll 10)+ (2*temp2(41 downto 21))));

      assert (temp3 < 4*PRIME_P)  report "TOOO BIIIIGG" severity Failure;
      
      if temp3 >= 3*PRIME_P then
        red_reg <= resize(temp3 - 3*PRIME_P, red'length);
      elsif temp3 >= 2*PRIME_P then          
        red_reg <= resize(temp3 - 2*PRIME_P, red'length);
      elsif temp3 >= PRIME_P then
        red_reg <= resize(temp3 - PRIME_P, red'length);
      else
        red_reg <= resize(temp3, red'length);
      end if;
      
      red <=red_reg;
    end if;
  end process;

end Behavioral;

