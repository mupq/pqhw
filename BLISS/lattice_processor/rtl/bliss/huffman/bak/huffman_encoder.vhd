-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity huffman_encoder is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    z1_V_V_dout : IN STD_LOGIC_VECTOR (15 downto 0);
    z1_V_V_empty_n : IN STD_LOGIC;
    z1_V_V_read : OUT STD_LOGIC;
    z2_V_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    z2_V_V_empty_n : IN STD_LOGIC;
    z2_V_V_read : OUT STD_LOGIC;
    code_V_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    code_V_full_n : IN STD_LOGIC;
    code_V_write : OUT STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of huffman_encoder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "huffman_encoder,hls_ip_2013_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.558000,HLS_SYN_LAT=1282,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv27_1 : STD_LOGIC_VECTOR (26 downto 0) := "000000000000000000000000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal e_table_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal e_table_ce0 : STD_LOGIC;
    signal e_table_q0 : STD_LOGIC_VECTOR (18 downto 0);
    signal bit_cnt_table_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal bit_cnt_table_ce0 : STD_LOGIC;
    signal bit_cnt_table_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_212_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_889 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_64 : BOOLEAN;
    signal i_1_fu_220_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_1_reg_893 : STD_LOGIC_VECTOR (8 downto 0);
    signal z1_temp_V_fu_226_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal z1_temp_V_reg_900 : STD_LOGIC_VECTOR (13 downto 0);
    signal z2_temp_V_fu_230_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal z2_temp_V_reg_908 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_181_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_916 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_189_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_14_reg_924 : STD_LOGIC_VECTOR (0 downto 0);
    signal z2prime_temp_V_2_fu_248_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal z2prime_temp_V_2_reg_932 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_sig_bdd_82 : BOOLEAN;
    signal z2_temp_V_3_fu_329_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal z2_temp_V_3_reg_938 : STD_LOGIC_VECTOR (2 downto 0);
    signal bit_cnt_signs_2_fu_343_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal bit_cnt_signs_2_reg_944 : STD_LOGIC_VECTOR (1 downto 0);
    signal signs_2_fu_358_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal signs_2_reg_950 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_12_reg_957 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp3_reg_963 : STD_LOGIC_VECTOR (0 downto 0);
    signal z1prime_temp_V_3_fu_398_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal z1prime_temp_V_3_reg_969 : STD_LOGIC_VECTOR (13 downto 0);
    signal sel_tmp8_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp8_reg_977 : STD_LOGIC_VECTOR (0 downto 0);
    signal z1_temp_V_3_fu_433_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal z1_temp_V_3_reg_983 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_15_fu_440_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_reg_988 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_993 : STD_LOGIC_VECTOR (0 downto 0);
    signal bit_cnt_signs_7_cast_fu_551_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal bit_cnt_signs_7_cast_reg_997 : STD_LOGIC_VECTOR (5 downto 0);
    signal signs_6_fu_562_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal signs_6_reg_1002 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_19_fu_569_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_reg_1007 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_cond1_fu_620_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp21_fu_763_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp21_reg_1025 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp22_fu_769_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp22_reg_1030 : STD_LOGIC_VECTOR (31 downto 0);
    signal bit_cnt_2_fu_775_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal bit_cnt_2_reg_1035 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_24_fu_851_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_1046 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp2_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_26_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_145 : BOOLEAN;
    signal i_reg_155 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_13_fu_690_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_205_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_104 : STD_LOGIC_VECTOR (31 downto 0);
    signal code_intern_3_fu_829_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal code_intern_fu_862_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bit_num_fu_108 : STD_LOGIC_VECTOR (31 downto 0);
    signal bit_num_2_fu_835_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal bit_num_1_fu_791_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal block_fu_783_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal z2prime_temp_V_fu_238_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal z2prime_temp_V_1_fu_242_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_256_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_266_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal z2_temp_V_1_fu_278_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_318_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal z2_temp_V_2_fu_312_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal bit_cnt_signs_fu_299_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal bit_cnt_signs_1_cast_fu_262_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal bit_cnt_signs_1_fu_336_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal signs_1_fu_291_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_cast_fu_274_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal signs_fu_283_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal signs_3_fu_351_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal z1prime_temp_V_fu_234_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal z1prime_temp_V_1_fu_366_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_6_fu_372_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal z1prime_temp_V_2_fu_378_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal z1_temp_V_1_fu_406_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_8_fu_411_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp7_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal z1_temp_V_2_fu_416_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_16_fu_444_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_cast_fu_448_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal bit_cnt_signs_3_fu_475_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal bit_cnt_signs_4_fu_480_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal bit_cnt_signs_5_fu_486_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal signs_7_fu_468_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal signs_2_cast_fu_458_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal signs_5_fu_461_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal signs_8_fu_497_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal signs_4_fu_504_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal bit_cnt_signs_5_cast_fu_493_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal bit_cnt_signs_6_fu_531_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal bit_cnt_signs_8_fu_537_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal bit_cnt_signs_7_fu_544_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal signs_10_fu_523_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal signs_4_cast_fu_511_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal signs_9_fu_515_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal signs_11_fu_555_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_23_fu_572_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_15_cast_fu_575_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_25_fu_584_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_28_fu_599_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_fu_593_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp1_fu_608_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp13_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_3_fu_579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_626_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_fu_635_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal val_fu_644_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_fu_658_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp20_fu_670_p0 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_V_fu_658_p2_temp: signed (3-1 downto 0);
    signal tmp20_fu_670_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal z2prime_temp_V_2_reg_932_temp: signed (3-1 downto 0);
    signal tmp20_fu_670_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal val_1_fu_680_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp20_fu_670_p2_temp: signed (4-1 downto 0);
    signal val_1_cast_fu_654_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal val_1_fu_680_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_690_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_1_fu_680_p2_temp: signed (8-1 downto 0);
    signal tmp_28_cast_fu_700_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_29_cast_fu_703_p1 : STD_LOGIC_VECTOR (38 downto 0);
    signal tmp_17_fu_707_p2 : STD_LOGIC_VECTOR (38 downto 0);
    signal bit_cnt_cast_fu_696_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal bit_cnt_fu_721_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_33_cast_fu_727_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_34_cast_fu_730_p1 : STD_LOGIC_VECTOR (46 downto 0);
    signal tmp_20_fu_734_p2 : STD_LOGIC_VECTOR (46 downto 0);
    signal bit_cnt_1_fu_744_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_21_fu_754_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bit_cnt_2_cast_fu_750_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_717_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_757_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_35_fu_740_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_18_fu_713_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bit_cnt_3_cast_fu_788_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_797_p4 : STD_LOGIC_VECTOR (26 downto 0);
    signal free_bits_fu_823_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);

    component huffman_encoder_e_table IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component huffman_encoder_bit_cnt_table IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;



begin
    e_table_U : component huffman_encoder_e_table
    generic map (
        DataWidth => 19,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => e_table_address0,
        ce0 => e_table_ce0,
        q0 => e_table_q0);

    bit_cnt_table_U : component huffman_encoder_bit_cnt_table
    generic map (
        DataWidth => 5,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => bit_cnt_table_address0,
        ce0 => bit_cnt_table_ce0,
        q0 => bit_cnt_table_q0);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- bit_num_fu_108 assign process. --
    bit_num_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st6_fsm_5 = ap_CS_fsm) and not(ap_sig_bdd_145) and not((ap_const_lv1_0 = icmp2_fu_807_p2)))) then 
                bit_num_fu_108 <= bit_num_1_fu_791_p2;
            elsif (((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = icmp2_fu_807_p2) and (ap_const_lv1_0 = tmp_26_fu_813_p2) and not(ap_sig_bdd_145))) then 
                bit_num_fu_108 <= bit_num_2_fu_835_p2;
            elsif ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0))) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = icmp2_fu_807_p2) and not((ap_const_lv1_0 = tmp_26_fu_813_p2)) and not(ap_sig_bdd_145)))) then 
                bit_num_fu_108 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- i_reg_155 assign process. --
    i_reg_155_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = icmp2_fu_807_p2) and (ap_const_lv1_0 = tmp_26_fu_813_p2) and not(ap_sig_bdd_145)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = icmp2_fu_807_p2) and not((ap_const_lv1_0 = tmp_26_fu_813_p2)) and not(ap_sig_bdd_145)) or (ap_ST_st7_fsm_6 = ap_CS_fsm))) then 
                i_reg_155 <= i_1_reg_893;
            elsif (((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_155 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    -- tmp_1_fu_104 assign process. --
    tmp_1_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then 
                tmp_1_fu_104 <= code_intern_fu_862_p2;
            elsif (((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = icmp2_fu_807_p2) and (ap_const_lv1_0 = tmp_26_fu_813_p2) and not(ap_sig_bdd_145))) then 
                tmp_1_fu_104 <= code_intern_3_fu_829_p2;
            elsif ((((ap_ST_st1_fsm_0 = ap_CS_fsm) and not((ap_start = ap_const_logic_0))) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = icmp2_fu_807_p2) and not((ap_const_lv1_0 = tmp_26_fu_813_p2)) and not(ap_sig_bdd_145)))) then 
                tmp_1_fu_104 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st5_fsm_4 = ap_CS_fsm)) then
                bit_cnt_2_reg_1035 <= bit_cnt_2_fu_775_p2;
                tmp21_reg_1025 <= tmp21_fu_763_p2;
                tmp22_reg_1030 <= tmp22_fu_769_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(ap_sig_bdd_82))) then
                bit_cnt_signs_2_reg_944 <= bit_cnt_signs_2_fu_343_p3;
                sel_tmp3_reg_963 <= sel_tmp3_fu_392_p2;
                sel_tmp8_reg_977 <= sel_tmp8_fu_427_p2;
                signs_2_reg_950 <= signs_2_fu_358_p3;
                tmp_12_reg_957 <= z1_V_V_dout(13 downto 13);
                tmp_15_reg_988 <= tmp_15_fu_440_p1;
                tmp_s_reg_993 <= tmp_s_fu_452_p2;
                z1_temp_V_3_reg_983 <= z1_temp_V_3_fu_433_p3;
                z1prime_temp_V_3_reg_969 <= z1prime_temp_V_3_fu_398_p3;
                z2_temp_V_3_reg_938 <= z2_temp_V_3_fu_329_p3;
                z2prime_temp_V_2_reg_932 <= z2prime_temp_V_2_fu_248_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (tmp_reg_889 = ap_const_lv1_0))) then
                bit_cnt_signs_7_cast_reg_997(0) <= bit_cnt_signs_7_cast_fu_551_p1(0);
    bit_cnt_signs_7_cast_reg_997(1) <= bit_cnt_signs_7_cast_fu_551_p1(1);
    bit_cnt_signs_7_cast_reg_997(2) <= bit_cnt_signs_7_cast_fu_551_p1(2);
                signs_6_reg_1002 <= signs_6_fu_562_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not(ap_sig_bdd_64))) then
                i_1_reg_893 <= i_1_fu_220_p2;
                tmp_reg_889 <= i_reg_155(8 downto 8);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st2_fsm_1 = ap_CS_fsm) and (tmp_fu_212_p3 = ap_const_lv1_0) and not(ap_sig_bdd_64))) then
                tmp_11_reg_916 <= z2_V_V_dout(2 downto 2);
                tmp_14_reg_924 <= z1_V_V_dout(13 downto 13);
                z1_temp_V_reg_900 <= z1_temp_V_fu_226_p1;
                z2_temp_V_reg_908 <= z2_temp_V_fu_230_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and (tmp_reg_889 = ap_const_lv1_0) and not((ap_const_lv1_0 = tmp_s_reg_993)))) then
                tmp_19_reg_1007 <= tmp_19_fu_569_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st6_fsm_5 = ap_CS_fsm) and not(ap_sig_bdd_145) and not((ap_const_lv1_0 = icmp2_fu_807_p2)))) then
                tmp_24_reg_1046 <= tmp_24_fu_851_p2;
            end if;
        end if;
    end process;
    bit_cnt_signs_7_cast_reg_997(5 downto 3) <= "000";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , tmp_fu_212_p3 , tmp_reg_889 , ap_sig_bdd_64 , ap_sig_bdd_82 , tmp_s_reg_993 , or_cond1_fu_620_p2 , icmp2_fu_807_p2 , ap_sig_bdd_145)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((not((tmp_fu_212_p3 = ap_const_lv1_0)) and not(ap_sig_bdd_64))) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                elsif (((tmp_fu_212_p3 = ap_const_lv1_0) and not(ap_sig_bdd_64))) then
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                else
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not(ap_sig_bdd_82)) then
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st4_fsm_3 => 
                if (((ap_const_lv1_0 = tmp_s_reg_993) or not((tmp_reg_889 = ap_const_lv1_0)) or not((ap_const_lv1_0 = or_cond1_fu_620_p2)))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                end if;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                if (((ap_const_lv1_0 = icmp2_fu_807_p2) and not(ap_sig_bdd_145))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                elsif ((not(ap_sig_bdd_145) and not((ap_const_lv1_0 = icmp2_fu_807_p2)))) then
                    ap_NS_fsm <= ap_ST_st7_fsm_6;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st2_fsm_1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, tmp_reg_889, tmp_s_reg_993, or_cond1_fu_620_p2)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and ((ap_const_lv1_0 = tmp_s_reg_993) or not((tmp_reg_889 = ap_const_lv1_0)) or not((ap_const_lv1_0 = or_cond1_fu_620_p2))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, tmp_reg_889, tmp_s_reg_993, or_cond1_fu_620_p2)
    begin
        if (((ap_ST_st4_fsm_3 = ap_CS_fsm) and ((ap_const_lv1_0 = tmp_s_reg_993) or not((tmp_reg_889 = ap_const_lv1_0)) or not((ap_const_lv1_0 = or_cond1_fu_620_p2))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= ap_const_lv1_1;

    -- ap_sig_bdd_145 assign process. --
    ap_sig_bdd_145_assign_proc : process(code_V_full_n, icmp2_fu_807_p2, tmp_26_fu_813_p2)
    begin
                ap_sig_bdd_145 <= (((code_V_full_n = ap_const_logic_0) and (ap_const_lv1_0 = icmp2_fu_807_p2) and (ap_const_lv1_0 = tmp_26_fu_813_p2)) or ((code_V_full_n = ap_const_logic_0) and (ap_const_lv1_0 = icmp2_fu_807_p2) and not((ap_const_lv1_0 = tmp_26_fu_813_p2))));
    end process;


    -- ap_sig_bdd_64 assign process. --
    ap_sig_bdd_64_assign_proc : process(z1_V_V_empty_n, z2_V_V_empty_n, code_V_full_n, tmp_fu_212_p3)
    begin
                ap_sig_bdd_64 <= (((z1_V_V_empty_n = ap_const_logic_0) and (tmp_fu_212_p3 = ap_const_lv1_0)) or ((tmp_fu_212_p3 = ap_const_lv1_0) and (z2_V_V_empty_n = ap_const_logic_0)) or ((code_V_full_n = ap_const_logic_0) and not((tmp_fu_212_p3 = ap_const_lv1_0))));
    end process;


    -- ap_sig_bdd_82 assign process. --
    ap_sig_bdd_82_assign_proc : process(z1_V_V_empty_n, z2_V_V_empty_n)
    begin
                ap_sig_bdd_82 <= ((z1_V_V_empty_n = ap_const_logic_0) or (z2_V_V_empty_n = ap_const_logic_0));
    end process;

    bit_cnt_1_fu_744_p2 <= std_logic_vector(unsigned(bit_cnt_cast_fu_696_p1) + unsigned(ap_const_lv6_10));
    bit_cnt_2_cast_fu_750_p1 <= std_logic_vector(resize(unsigned(bit_cnt_1_fu_744_p2),32));
    bit_cnt_2_fu_775_p2 <= std_logic_vector(unsigned(bit_cnt_1_fu_744_p2) + unsigned(bit_cnt_signs_7_cast_reg_997));
    bit_cnt_3_cast_fu_788_p1 <= std_logic_vector(resize(unsigned(bit_cnt_2_reg_1035),32));
    bit_cnt_cast_fu_696_p1 <= std_logic_vector(resize(unsigned(bit_cnt_table_q0),6));
    bit_cnt_fu_721_p2 <= std_logic_vector(unsigned(bit_cnt_cast_fu_696_p1) + unsigned(ap_const_lv6_8));
    bit_cnt_signs_1_cast_fu_262_p1 <= std_logic_vector(resize(unsigned(tmp_2_fu_256_p2),2));
    bit_cnt_signs_1_fu_336_p3 <= 
        bit_cnt_signs_fu_299_p3 when (tmp_11_reg_916(0) = '1') else 
        bit_cnt_signs_1_cast_fu_262_p1;
    bit_cnt_signs_2_fu_343_p3 <= 
        bit_cnt_signs_fu_299_p3 when (sel_tmp2_fu_323_p2(0) = '1') else 
        bit_cnt_signs_1_fu_336_p3;
    bit_cnt_signs_3_fu_475_p2 <= std_logic_vector(unsigned(bit_cnt_signs_2_reg_944) + unsigned(ap_const_lv2_1));
    bit_cnt_signs_4_fu_480_p3 <= 
        bit_cnt_signs_3_fu_475_p2 when (tmp_12_reg_957(0) = '1') else 
        bit_cnt_signs_2_reg_944;
    bit_cnt_signs_5_cast_fu_493_p1 <= std_logic_vector(resize(unsigned(bit_cnt_signs_5_fu_486_p3),3));
    bit_cnt_signs_5_fu_486_p3 <= 
        bit_cnt_signs_3_fu_475_p2 when (sel_tmp3_reg_963(0) = '1') else 
        bit_cnt_signs_4_fu_480_p3;
    bit_cnt_signs_6_fu_531_p2 <= std_logic_vector(unsigned(bit_cnt_signs_5_cast_fu_493_p1) + unsigned(ap_const_lv3_1));
    bit_cnt_signs_7_cast_fu_551_p1 <= std_logic_vector(resize(unsigned(bit_cnt_signs_7_fu_544_p3),6));
    bit_cnt_signs_7_fu_544_p3 <= 
        bit_cnt_signs_6_fu_531_p2 when (sel_tmp8_reg_977(0) = '1') else 
        bit_cnt_signs_8_fu_537_p3;
    bit_cnt_signs_8_fu_537_p3 <= 
        bit_cnt_signs_6_fu_531_p2 when (tmp_14_reg_924(0) = '1') else 
        bit_cnt_signs_5_cast_fu_493_p1;
    bit_cnt_signs_fu_299_p3 <= 
        ap_const_lv2_2 when (tmp_2_fu_256_p2(0) = '1') else 
        ap_const_lv2_1;
    bit_cnt_table_address0 <= tmp_13_fu_690_p1(6 - 1 downto 0);

    -- bit_cnt_table_ce0 assign process. --
    bit_cnt_table_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            bit_cnt_table_ce0 <= ap_const_logic_1;
        else 
            bit_cnt_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bit_num_1_fu_791_p2 <= std_logic_vector(unsigned(bit_cnt_3_cast_fu_788_p1) + unsigned(bit_num_fu_108));
    bit_num_2_fu_835_p2 <= std_logic_vector(unsigned(bit_cnt_3_cast_fu_788_p1) - unsigned(free_bits_fu_823_p2));
    block_fu_783_p2 <= std_logic_vector(unsigned(tmp22_reg_1030) + unsigned(tmp21_reg_1025));

    -- code_V_din assign process. --
    code_V_din_assign_proc : process(ap_CS_fsm, tmp_fu_212_p3, ap_sig_bdd_64, icmp2_fu_807_p2, tmp_26_fu_813_p2, ap_sig_bdd_145, grp_fu_205_p2, tmp_1_fu_104)
    begin
        if ((((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = icmp2_fu_807_p2) and (ap_const_lv1_0 = tmp_26_fu_813_p2) and not(ap_sig_bdd_145)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = icmp2_fu_807_p2) and not((ap_const_lv1_0 = tmp_26_fu_813_p2)) and not(ap_sig_bdd_145)))) then 
            code_V_din <= grp_fu_205_p2;
        elsif (((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((tmp_fu_212_p3 = ap_const_lv1_0)) and not(ap_sig_bdd_64))) then 
            code_V_din <= tmp_1_fu_104;
        else 
            code_V_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- code_V_write assign process. --
    code_V_write_assign_proc : process(ap_CS_fsm, tmp_fu_212_p3, ap_sig_bdd_64, icmp2_fu_807_p2, tmp_26_fu_813_p2, ap_sig_bdd_145)
    begin
        if ((((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = icmp2_fu_807_p2) and (ap_const_lv1_0 = tmp_26_fu_813_p2) and not(ap_sig_bdd_145)) or ((ap_ST_st6_fsm_5 = ap_CS_fsm) and (ap_const_lv1_0 = icmp2_fu_807_p2) and not((ap_const_lv1_0 = tmp_26_fu_813_p2)) and not(ap_sig_bdd_145)) or ((ap_ST_st2_fsm_1 = ap_CS_fsm) and not((tmp_fu_212_p3 = ap_const_lv1_0)) and not(ap_sig_bdd_64)))) then 
            code_V_write <= ap_const_logic_1;
        else 
            code_V_write <= ap_const_logic_0;
        end if; 
    end process;

    code_intern_3_fu_829_p2 <= std_logic_vector(shift_right(signed(block_fu_783_p2),to_integer(unsigned('0' & free_bits_fu_823_p2(31-1 downto 0)))));
    code_intern_fu_862_p2 <= std_logic_vector(unsigned(tmp_24_reg_1046) + unsigned(tmp_1_fu_104));
    e_table_address0 <= tmp_13_fu_690_p1(6 - 1 downto 0);

    -- e_table_ce0 assign process. --
    e_table_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            e_table_ce0 <= ap_const_logic_1;
        else 
            e_table_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    free_bits_fu_823_p2 <= std_logic_vector(unsigned(ap_const_lv32_20) - unsigned(bit_num_fu_108));
    grp_fu_181_p3 <= z2_V_V_dout(2 downto 2);
    grp_fu_189_p3 <= z1_V_V_dout(13 downto 13);
    grp_fu_201_p2 <= std_logic_vector(shift_left(unsigned(block_fu_783_p2),to_integer(unsigned('0' & bit_num_fu_108(31-1 downto 0)))));
    grp_fu_205_p2 <= std_logic_vector(unsigned(grp_fu_201_p2) + unsigned(tmp_1_fu_104));
    i_1_fu_220_p2 <= std_logic_vector(unsigned(i_reg_155) + unsigned(ap_const_lv9_1));
    icmp1_fu_608_p2 <= "1" when (tmp_28_fu_599_p4 = ap_const_lv2_1) else "0";
    icmp2_fu_807_p2 <= "1" when (signed(tmp_36_fu_797_p4) < signed(ap_const_lv27_1)) else "0";
    icmp_fu_593_p2 <= "1" when (tmp_25_fu_584_p4 = ap_const_lv2_1) else "0";
    or_cond1_fu_620_p2 <= (tmp13_fu_614_p2 or tmp_3_fu_579_p2);
    p_cast_fu_274_p1 <= std_logic_vector(resize(unsigned(tmp_10_fu_266_p3),2));
    r_V_fu_658_p2 <= std_logic_vector(shift_left(unsigned(z2_temp_V_3_reg_938),to_integer(unsigned('0' & ap_const_lv3_1(3-1 downto 0)))));
    sel_tmp1_fu_318_p2 <= (tmp_11_reg_916 xor ap_const_lv1_1);
    sel_tmp2_fu_323_p2 <= (tmp_4_fu_307_p2 and sel_tmp1_fu_318_p2);
    sel_tmp3_fu_392_p2 <= (tmp_6_fu_372_p2 and sel_tmp_fu_386_p2);
    sel_tmp7_fu_422_p2 <= (tmp_14_reg_924 xor ap_const_lv1_1);
    sel_tmp8_fu_427_p2 <= (tmp_8_fu_411_p2 and sel_tmp7_fu_422_p2);
    sel_tmp_fu_386_p2 <= (grp_fu_189_p3 xor ap_const_lv1_1);
    signs_10_fu_523_p3 <= (signs_4_fu_504_p3 & ap_const_lv1_1);
    signs_11_fu_555_p3 <= 
        signs_10_fu_523_p3 when (tmp_14_reg_924(0) = '1') else 
        signs_4_cast_fu_511_p1;
    signs_1_fu_291_p3 <= (tmp_10_fu_266_p3 & ap_const_lv1_1);
    signs_2_cast_fu_458_p1 <= std_logic_vector(resize(unsigned(signs_2_reg_950),3));
    signs_2_fu_358_p3 <= 
        signs_fu_283_p3 when (sel_tmp2_fu_323_p2(0) = '1') else 
        signs_3_fu_351_p3;
    signs_3_fu_351_p3 <= 
        signs_1_fu_291_p3 when (tmp_11_reg_916(0) = '1') else 
        p_cast_fu_274_p1;
    signs_4_cast_fu_511_p1 <= std_logic_vector(resize(unsigned(signs_4_fu_504_p3),4));
    signs_4_fu_504_p3 <= 
        signs_5_fu_461_p3 when (sel_tmp3_reg_963(0) = '1') else 
        signs_8_fu_497_p3;
    signs_5_fu_461_p3 <= (signs_2_reg_950 & ap_const_lv1_0);
    signs_6_fu_562_p3 <= 
        signs_9_fu_515_p3 when (sel_tmp8_reg_977(0) = '1') else 
        signs_11_fu_555_p3;
    signs_7_fu_468_p3 <= (signs_2_reg_950 & ap_const_lv1_1);
    signs_8_fu_497_p3 <= 
        signs_7_fu_468_p3 when (tmp_12_reg_957(0) = '1') else 
        signs_2_cast_fu_458_p1;
    signs_9_fu_515_p3 <= (signs_4_fu_504_p3 & ap_const_lv1_0);
    signs_fu_283_p3 <= (tmp_10_fu_266_p3 & ap_const_lv1_0);
    tmp13_fu_614_p2 <= (icmp_fu_593_p2 or icmp1_fu_608_p2);
    
    r_V_fu_658_p2_temp <= signed(r_V_fu_658_p2);
    tmp20_fu_670_p0 <= std_logic_vector(resize(r_V_fu_658_p2_temp,4));

    
    z2prime_temp_V_2_reg_932_temp <= signed(z2prime_temp_V_2_reg_932);
    tmp20_fu_670_p1 <= std_logic_vector(resize(z2prime_temp_V_2_reg_932_temp,4));

    tmp20_fu_670_p2 <= std_logic_vector(unsigned(tmp20_fu_670_p0) + unsigned(tmp20_fu_670_p1));
    tmp21_fu_763_p2 <= std_logic_vector(unsigned(tmp_33_fu_717_p1) + unsigned(tmp_22_fu_757_p2));
    tmp22_fu_769_p2 <= std_logic_vector(unsigned(tmp_35_fu_740_p1) + unsigned(tmp_18_fu_713_p1));
    tmp_10_fu_266_p3 <= z2_V_V_dout(2 downto 2);
    tmp_11_cast_fu_448_p1 <= std_logic_vector(resize(unsigned(tmp_16_fu_444_p1),14));
    
    val_1_fu_680_p2_temp <= signed(val_1_fu_680_p2);
    tmp_13_fu_690_p0 <= std_logic_vector(resize(val_1_fu_680_p2_temp,32));

    tmp_13_fu_690_p1 <= std_logic_vector(resize(unsigned(tmp_13_fu_690_p0),64));
    tmp_15_cast_fu_575_p1 <= std_logic_vector(resize(unsigned(tmp_23_fu_572_p1),14));
    tmp_15_fu_440_p1 <= z1_temp_V_3_fu_433_p3(8 - 1 downto 0);
    tmp_16_fu_444_p1 <= z1_temp_V_3_fu_433_p3(10 - 1 downto 0);
    tmp_17_fu_707_p2 <= std_logic_vector(shift_left(unsigned(tmp_28_cast_fu_700_p1),to_integer(unsigned('0' & tmp_29_cast_fu_703_p1(31-1 downto 0)))));
    tmp_18_fu_713_p1 <= std_logic_vector(resize(unsigned(e_table_q0),32));
    tmp_19_fu_569_p1 <= z1prime_temp_V_3_reg_969(8 - 1 downto 0);
    tmp_20_fu_734_p2 <= std_logic_vector(shift_left(unsigned(tmp_33_cast_fu_727_p1),to_integer(unsigned('0' & tmp_34_cast_fu_730_p1(31-1 downto 0)))));
    tmp_21_fu_754_p1 <= std_logic_vector(resize(unsigned(signs_6_reg_1002),32));
    tmp_22_fu_757_p2 <= std_logic_vector(shift_left(unsigned(tmp_21_fu_754_p1),to_integer(unsigned('0' & bit_cnt_2_cast_fu_750_p1(31-1 downto 0)))));
    tmp_23_fu_572_p1 <= z1prime_temp_V_3_reg_969(10 - 1 downto 0);
    tmp_24_fu_851_p2 <= std_logic_vector(shift_left(unsigned(block_fu_783_p2),to_integer(unsigned('0' & bit_num_fu_108(31-1 downto 0)))));
    tmp_25_fu_584_p4 <= z2_temp_V_3_reg_938(2 downto 1);
    tmp_26_fu_813_p2 <= "1" when (bit_num_1_fu_791_p2 = ap_const_lv32_20) else "0";
    tmp_28_cast_fu_700_p1 <= std_logic_vector(resize(unsigned(tmp_15_reg_988),39));
    tmp_28_fu_599_p4 <= z2prime_temp_V_2_reg_932(2 downto 1);
    tmp_29_cast_fu_703_p1 <= std_logic_vector(resize(unsigned(bit_cnt_table_q0),39));
    tmp_2_fu_256_p2 <= "0" when (z2prime_temp_V_fu_238_p1 = ap_const_lv3_0) else "1";
    tmp_33_cast_fu_727_p1 <= std_logic_vector(resize(unsigned(tmp_19_reg_1007),47));
    tmp_33_fu_717_p1 <= tmp_17_fu_707_p2(32 - 1 downto 0);
    tmp_34_cast_fu_730_p1 <= std_logic_vector(resize(unsigned(bit_cnt_fu_721_p2),47));
    tmp_35_fu_740_p1 <= tmp_20_fu_734_p2(32 - 1 downto 0);
    tmp_36_fu_797_p4 <= bit_num_1_fu_791_p2(31 downto 5);
    tmp_3_fu_579_p2 <= "0" when (tmp_15_cast_fu_575_p1 = z1prime_temp_V_3_reg_969) else "1";
    tmp_4_fu_307_p2 <= "1" when (signed(z2_temp_V_reg_908) > signed(ap_const_lv3_0)) else "0";
    tmp_5_fu_626_p4 <= z1_temp_V_3_reg_983(9 downto 8);
    tmp_6_fu_372_p2 <= "1" when (signed(z1prime_temp_V_fu_234_p1) > signed(ap_const_lv14_0)) else "0";
    tmp_7_fu_635_p4 <= z1prime_temp_V_3_reg_969(9 downto 8);
    tmp_8_fu_411_p2 <= "1" when (signed(z1_temp_V_reg_900) > signed(ap_const_lv14_0)) else "0";
    tmp_fu_212_p3 <= i_reg_155(8 downto 8);
    tmp_s_fu_452_p2 <= "1" when (tmp_11_cast_fu_448_p1 = z1_temp_V_3_fu_433_p3) else "0";
    val_1_cast_fu_654_p1 <= std_logic_vector(resize(unsigned(val_fu_644_p4),8));
    
    tmp20_fu_670_p2_temp <= signed(tmp20_fu_670_p2);
    val_1_fu_680_p0 <= std_logic_vector(resize(tmp20_fu_670_p2_temp,8));

    val_1_fu_680_p2 <= std_logic_vector(unsigned(val_1_fu_680_p0) + unsigned(val_1_cast_fu_654_p1));
    val_fu_644_p4 <= ((tmp_5_fu_626_p4 & tmp_7_fu_635_p4) & ap_const_lv2_0);

    -- z1_V_V_read assign process. --
    z1_V_V_read_assign_proc : process(ap_CS_fsm, tmp_fu_212_p3, ap_sig_bdd_64, ap_sig_bdd_82)
    begin
        if ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and (tmp_fu_212_p3 = ap_const_lv1_0) and not(ap_sig_bdd_64)) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(ap_sig_bdd_82)))) then 
            z1_V_V_read <= ap_const_logic_1;
        else 
            z1_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    z1_temp_V_1_fu_406_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(z1_temp_V_reg_900));
    z1_temp_V_2_fu_416_p3 <= 
        z1_temp_V_1_fu_406_p2 when (tmp_14_reg_924(0) = '1') else 
        z1_temp_V_reg_900;
    z1_temp_V_3_fu_433_p3 <= 
        z1_temp_V_reg_900 when (sel_tmp8_fu_427_p2(0) = '1') else 
        z1_temp_V_2_fu_416_p3;
    z1_temp_V_fu_226_p1 <= z1_V_V_dout(14 - 1 downto 0);
    z1prime_temp_V_1_fu_366_p2 <= std_logic_vector(unsigned(ap_const_lv14_0) - unsigned(z1prime_temp_V_fu_234_p1));
    z1prime_temp_V_2_fu_378_p3 <= 
        z1prime_temp_V_1_fu_366_p2 when (grp_fu_189_p3(0) = '1') else 
        z1prime_temp_V_fu_234_p1;
    z1prime_temp_V_3_fu_398_p3 <= 
        z1prime_temp_V_fu_234_p1 when (sel_tmp3_fu_392_p2(0) = '1') else 
        z1prime_temp_V_2_fu_378_p3;
    z1prime_temp_V_fu_234_p1 <= z1_V_V_dout(14 - 1 downto 0);

    -- z2_V_V_read assign process. --
    z2_V_V_read_assign_proc : process(ap_CS_fsm, tmp_fu_212_p3, ap_sig_bdd_64, ap_sig_bdd_82)
    begin
        if ((((ap_ST_st2_fsm_1 = ap_CS_fsm) and (tmp_fu_212_p3 = ap_const_lv1_0) and not(ap_sig_bdd_64)) or ((ap_ST_st3_fsm_2 = ap_CS_fsm) and not(ap_sig_bdd_82)))) then 
            z2_V_V_read <= ap_const_logic_1;
        else 
            z2_V_V_read <= ap_const_logic_0;
        end if; 
    end process;

    z2_temp_V_1_fu_278_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(z2_temp_V_reg_908));
    z2_temp_V_2_fu_312_p3 <= 
        z2_temp_V_1_fu_278_p2 when (tmp_11_reg_916(0) = '1') else 
        z2_temp_V_reg_908;
    z2_temp_V_3_fu_329_p3 <= 
        z2_temp_V_reg_908 when (sel_tmp2_fu_323_p2(0) = '1') else 
        z2_temp_V_2_fu_312_p3;
    z2_temp_V_fu_230_p1 <= z2_V_V_dout(3 - 1 downto 0);
    z2prime_temp_V_1_fu_242_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(z2prime_temp_V_fu_238_p1));
    z2prime_temp_V_2_fu_248_p3 <= 
        z2prime_temp_V_1_fu_242_p2 when (grp_fu_181_p3(0) = '1') else 
        z2prime_temp_V_fu_238_p1;
    z2prime_temp_V_fu_238_p1 <= z2_V_V_dout(3 - 1 downto 0);
end behav;
