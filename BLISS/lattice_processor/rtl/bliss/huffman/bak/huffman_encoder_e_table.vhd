-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity huffman_encoder_e_table_rom is 
    generic(
             dwidth     : integer := 19; 
             awidth     : integer := 6; 
             mem_size    : integer := 64
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of huffman_encoder_e_table_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "0000000000000000001", 1 => "0000000000000000010", 
    2 => "0000000000000010010", 3 => "0000000000000011100", 
    4 => "0000000000000000011", 5 => "0000000000000010110", 
    6 => "0000000000000011010", 7 => "0000000000000111100", 
    8 => "0000000000000000100", 9 => "0000000000000010000", 
    10 => "0000000000000110000", 11 => "0000000000010100000", 
    12 => "0000000000110000000", 13 => "0000000010100000000", 
    14 => "0000000110111100000", 15 => "0000000010111100000", 
    16 => "0000000000000000101", 17 => "0000000000000000110", 
    18 => "0000000000000001010", 19 => "0000000000001011100", 
    20 => "0000000000000000111", 21 => "0000000000000001110", 
    22 => "0000000000000011110", 23 => "0000000000001111100", 
    24 => "0000000000000010100", 25 => "0000000000001001000", 
    26 => "0000000000000101000", 27 => "0000000000011100000", 
    28 => "0000000000001100000", 29 => "0000000000010000000", 
    30 => "0000000010010000000", 31 => "0000001010111100000", 
    32 => "0000000000000011000", 33 => "0000000000001110000", 
    34 => "0000000000001010000", 35 => "0000000000100100000", 
    36 => "0000000000000001100", 37 => "0000000000000001000", 
    38 => "0000000000001101000", 39 => "0000000000101100000", 
    40 => "0000000000001000000", 41 => "0000000001111100000", 
    42 => "0000000000000000000", 43 => "0000000100111100000", 
    44 => "0000000000111100000", 45 => "0000001011010000000", 
    46 => "0000000011010000000", 47 => "0001011010111100000", 
    48 => "0000000000000100000", 49 => "0000000000100000000", 
    50 => "0000000001100000000", 51 => "0000011011010000000", 
    52 => "0000000000110100000", 53 => "0000000001010000000", 
    54 => "0000000011100000000", 55 => "0000010010111100000", 
    56 => "0000000111010000000", 57 => "0000010011010000000", 
    58 => "0000111010111100000", 59 => "0011011010111100000", 
    60 => "0010011010111100000", 61 => "0000011010111100000", 
    62 => "1100011010111100000", 63 => "0100011010111100000" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity huffman_encoder_e_table is
    generic (
        DataWidth : INTEGER := 19;
        AddressRange : INTEGER := 64;
        AddressWidth : INTEGER := 6);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of huffman_encoder_e_table is
    component huffman_encoder_e_table_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;




begin
    huffman_encoder_e_table_rom_U :  component huffman_encoder_e_table_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


